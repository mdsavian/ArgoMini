
@using ArgoMini.Models
@model NotaFiscalSaida
@{
    ViewBag.Title = "Emitir Documento";
}

<h2>Emitir Documento</h2>
@using (Html.BeginForm())
{
    <div class="form-horizontal">
        <div>
            @Html.ActionLink("Adicionar Produto", "AddProduto", "FrenteCaixa", new { @class = "btn btn-primary col-md-push-11" })
        </div>
        <div class="form-group">
            @Html.LabelFor(x => x.CnpjCpf, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(x => x.CnpjCpf, new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.CnpjCpf, "", new { @class = "text-danger" })
            </div>
        </div>


        <br />
        <table class="table table-responsive table-hover">
            <tr>
                <th>
                    @Html.DisplayName("Código de Barras")
                </th>
                <th>
                    @Html.DisplayName("Preço Venda")
                </th>
                <th>
                    @Html.DisplayName("Quantidade")
                </th>
                <th>
                    @Html.DisplayName("Valor Total")
                </th>
                <th></th>
            </tr>
            @foreach (var emp in Model.Itens)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(x => emp.NotaFiscalSaidaItemId)
                    </td>
                    <td>
                        @Html.DisplayFor(x => emp.PrecoVenda)
                    </td>
                    <td>
                        @Html.DisplayFor(x => emp.Quantidade)
                    </td>
                    <td>
                        @Html.DisplayFor(x => emp.TotalMercadoria)
                    </td>
                    <td>
                        @Html.ActionLink("Editar", "Editar", new { id = emp.NotaFiscalSaidaItemId }) |
                        @Html.ActionLink("Cancelar", "Cancelar", new { id = emp.NotaFiscalSaidaItemId })
                    </td>
                </tr>
            }

        </table>
        <div class="progress">
            <div class="progress-bar progress-bar-striped" role="progressbar" style="width: 10%" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100"></div>
        </div>
        <div class="form-group">
            <label class="control-label" for="ValorTotalNota">ValorTotalNota</label>
            <input class="form-control text-box single-line" data-val="true" data-val-number="The field ValorTotalNota must be a number." data-val-required="O campo ValorTotalNota é obrigatório." disabled="disabled" id="ValorTotalNota" name="ValorTotalNota" type="text" value="0,00">
        </div>
        <div>
            @Html.ActionLink("Emitir Nota Fiscal", "EmitirNotaFiscal", "FrenteCaixa", new { @class = "btn btn-primary " })
            @Html.ActionLink("Cancelar Nota Fiscal", "CancelarNotaFiscal", "FrenteCaixa", new { @class = "btn btn-primary " })
            @Html.ActionLink("Inutlizar Nota Fiscal", "InutilizarNotaFiscal", "FrenteCaixa", new { @class = "btn btn-primary " })
        </div>

    </div>
}

<script type="text/javascript">
    $(document).ready(function () {

        $("#progressBar").kendoProgressBar({
            min: 0,
            max: 100,
            type: "percent",
        });
    });

    function StartInvoicing()
    {
        var progressNotifier = $.connection.progressHub;

        // client-side sendMessage function that will be called from the server-side
        progressNotifier.client.sendMessage = function (message, count) {
            // update progress
            UpdateProgress(message, count);
            //alert(message);
        };

        // establish the connection to the server and start server-side operation
        $.connection.hub.start().done(function () {
            // call the method CallLongOperation defined in the Hub
            progressNotifier.server.getCountAndMessage();
        });
    }

// Update the progress bar 
    function UpdateProgress(message, count) {
        var result = $("#result");
        result.html(message);
        $("#progressBar").data("kendoProgressBar").value(count);
    }
</script>
@*<head runat="server">

        <script language="javascript" type="text/javascript">

            $(window).on("beforeunload", function (e) {
                //ajax post to controller action
                /* { /*param1 : "value1", param2: "value2" }*/
                $.ajax({
                    type: 'POST',
                    url: '/FrenteCaixa/LimpaNota',
                    dataType: 'html'
                });
            });

            function Opa() {
                alert("hellloo");
                //alert(document.);
            }


                //window.onbeforeunload =
                //    function() {
                //        if ((window.event.clientX < 0) || (window.event.clientY < 0)) {
                //            window.open("../LOGOUT/Logout.aspx", "fechar");
                //        }
                //    }



                //function Verificar() {
                //    var tecla = window.event.keyCode; //tecla normal
                //    var alt = window.event.altKey; // Para Controle da Tecla ALT
                //    var ctrl = window.event.ctrlKey; // Para Controle da Tecla CTRL

                //    if (alt && tecla == 115) // Evita fechar via Teclado
                //    {
                //        alert("Para sair do sistema clique em SAIR !");
                //        event.keyCode = 116;
                //        event.returnValue = false;
                //    }
                //    if (ctrl && tecla == 78) {
                //        alert("CTRL+N bloqueado");
                //        event.keyCode = 0;
                //        event.returnValue = false;
                //    }
                //}

        </script>
    </head>*@